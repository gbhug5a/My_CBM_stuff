

Note:  The "£" character represents the CBM pound sign, "«" the CBM
       left arrow symbol, and "^" the CBM up arrow symbol.


                                ASSEMBLER  C64



        Assembler is a 6502/6510 symbolic assembler for the C64. It is written
entirely in machine language, and contains three functional sections:

Text Editor - The editor is used to type in, edit, print out, load and save the
source code text. It is a modified version of the SpeedScript word processor.

Assembler - This section assembles the source code text into machine language
object code. It is entered from the editor using the <CTRL> A command.

Monitor - A machine language monitor program used to directly examine and
manipulate the computer's memory. It includes a non-symbolic assembler.


                                  TEXT EDITOR
                                  -----------


        SpeedScript 3.2 has been substantially modified for use in Assembler.
The "word wrap" feature has been replaced by a new display and print routine
which automatically tabs to the column set by <C>N after the first space on
each line. This lines up the opcode column automatically, allows the line label
field to be changed instantly, and conserves text memory. The <C>B command
toggles the automatic addition of a space after RETURN is typed, so that you
end up in the opcode column after RETURN; in this mode, f5 is used to insert
line labels. Buffer manipulation has been made more flexible. You can "hide"
the current buffer contents, and exchange the buffer and text memory. New print
format codes have been added, and there are other changes as outlined below.
For detailed information on SpeedScript, see the March, 1985 issue of COMPUTE!.


TEXT EDITING COMMANDS  <C> = Control  <S> = Shift  (T) = Toggle
-----------------------------------------------------------------------------
 RESTORE  Exit to MONITOR. Re-enter Assembler from BASIC (RUN) or MON (G80D).
 csr r;l  Cursor to next character; previous character.
 csr d;u  Cursor to beginning of next line; previous line.
   f1;f2  Cursor to beginning of next word; previous word.
   f3;f4  Cursor to top of next screen page; bottom of previous screen page.
      f5  (T) do f6 and enter insert mode; (T) exit insert mode and do f1.
      f6  Cursor to beginning of current line.
      f7  Load text at cursor. Command line green if cursor not at top of text.
          If NOT ENOUGH ROOM error on Load, Assembler was trashed - reboot.
      f8  Save all text. Text is saved in screen code format as program file.
   <C> V  Verify file to text.
   <C> 4  Display disk directory. Space bar pauses, resumes, the listing.
   <C> ^  Send command to disk drive, then read the error channel.
     DEL  Clear character to left of cursor.
    INST  Insert space at cursor.
    HOME  Cursor to top of page. If already there, cursor to top of text.
   CLEAR  Clear text from cursor to end. Cleared text is not buffered.
   <C> Z  Cursor to end of text.









                                      -2-


    STOP  Insert 8 spaces at cursor.
     RUN  Insert 255 spaces at cursor.
  RETURN  End of line. Display shows "«". Lines must be <= 128 chars.
       «  Cursor to previous character, convert it to space.
   <C> «  Clear character under cursor.
<S><C> «  Clear current and all following spaces, to 1st non-space character.
   <C> 1  Save current cursor position for later return.
   <C> 0  Return to previously saved cursor position.
   <C> 8  "Hide" current active buffer contents.  "(" shows in command line.
   <C> U  "Uncover" hidden buffer. Include it in active buffer.
   <C> K  Kill the active buffer. Hidden Buffer Not Affected ("HBNA")
   <C> R  Restore active buffer to text at cursor. Buffer not cleared. (HBNA)
   <C> X  Exchange current text file and active buffer contents. (HBNA)
   <C> E  Erase: do <C>K, then clear from text, and add to active buffer, the
          following Words, Lines, Pages, All. (HBNA)
<S><C> E  Same, but buffer not Killed. Chain separate Erases to buffer. (HBNA)
   <C> D  Delete: do <C>K, then clear from text, and add to active buffer, the
          previous Word, Line, Page, All. (HBNA)
<S><C> H  Enter Hunt phrase, go to first occurrence in text after cursor.
   <C> H  Hunt for next occurrence of previously entered Hunt phrase.
<S><C> J  Enter Replace phrase, replace Hunt phrase in text if current cursor
          position is a Hunt "found" location. (Replace phrase can be null.)
   <C> J  Replace Hunt phrase in text with previously entered Replace phrase.
          (H and J are manual Hunt, manual Replace)
<S><C> G  Enter Hunt and Replace phrases. Automatic (global) search and replace
          from cursor through end of text.
   <C> G  Enter Goto phrase (same as Hunt phrase). Cursor to first occurrence
          in text (from top) which begins a line and is followed by a space.
   <C> I  (T)Enter/Exit insert mode. Automatic insert if cursor on "«".
   <C> N  Increment the automatic tab column. Rolls from 2 to 17. Default = 10.
   <C> B  (T)Automatic space after RETURN is typed.  "-" in command line.
   <C> =  Display amount of unused text memory. Max = 25,600 bytes (25K).
   <C> £  Enter print format code. Displayed in REVERSE. See section on codes.
   <C> P  Print from cursor to end of text to device #4, "case" same as screen.
<S><C> P  Print to Screen, Disk, Printer or Tape.
          "Printer" gives choice of device #, secondary address, filename.
     <S>  Shift or shift lock pauses printing.
STOP;CBM  STOP key or Commodore key aborts printing.
   <C> A  Assemble: Clear active and hidden buffers. Assemble text. Object code
          to hidden buffer if "NO ERRORS".
   <C> W  Write hidden buffer (object code) to disk as program file .
   <C> L  Add symbol table to end of text after "NO ERRORS" assembly.


THE BUFFER: The buffer memory range ($9800-$FBFF) is the same size as the text
memory. The pointers BUFSTRT and BUFEND always point to the start and end of
the "active" buffer. Both default to $9800. The <C>8 command hides the current
active buffer by putting the current value of BUFEND into BUFSTRT. The <C>U
command resets BUFSTRT to $9800, but does not change BUFEND. Thus the hidden
buffer is restored to the active state. To have two files in memory at the same
time, just Erase All the first file and hide it, then load the second. The two
can be exchanged by the control character sequence KUX8, which Kills the active
buffer, Uncovers the hidden buffer, eXchanges the two files, and hides the
buffered file. To transfer text from one file to the other, Erase the text to









                                      -3-


the active buffer, then hit <C>8 to include it in the hidden buffer. Text can
be moved around using Erase/Restore, or copied using multiple Restores.


ABORTS: You can abort most functions requiring input by hitting RETURN. One
exception is Replace, which thinks the replace phrase is null. If you get stuck
in Replace, don't hit RETURN until you have entered either a duplicate of the
Hunt phrase or some phrase that won't otherwise be in your program, like
"APPLE". Then if anything does get replaced, it will be easy to Hunt for.
In general, the manual Hunt and Replace are safer than the global combination.


PRINT FORMAT CODES
------------------

Codes are entered with <C>£ and displayed in REVERSE. Stage 1 codes must be at
the beginning of a line, or follow another Stage 1 code. Stage 2 can be
anywhere. The codes shown below are unshifted, except "?" and such.  "nn" means
a number should follow the code.

Code  Default  Description  (2) = Stage 2
----  -------  --------------------------
A        -     Convert print output to true ASCII - See note below
Bnn     62     Bottom margin - the last line of printing, except footer
C (2)    -     Center rest of line on the page (not on the margins)
E (2)    -     Edge right - right justify at right margin
F        -     Footer - the rest of the line is the footer. May include Stage 2
Gnn:fn   -     Goto (Link) the next text file. nn = device #, fn = filename
H        -     Header - the rest of the line is the header. May include Stage 2
I        -     Information (comment) - the entire line will be totally ignored
J        -     Linefeed will follow carriage return
Lnn      0     Left margin - the number of spaces printed before the text
M        -     Margin release - sets L to zero for this line only (outdent)
N        -     Next page - forced paging
Pnn     66     Page length - the number of lines on a sheet of paper
Rnn     80     Right margin - max # of chars printed on a line, including L
Snn      1     Spacing - 1 = single, 2 = double, etc.
Tnn      5     Top margin - the first line of printing, except header
U (2)    -     Underline toggle - backspace and underline (not CBM printers)
W        -     Wait for single sheet insertion (ignored if Screen, Disk, Tape)
Xnn     80     Across - width of the paper in columns (used for centering)
@nn      1     Start page numbering with page nn (0 to 65535)
?nn      1     Inhibit printing until page number nn is reached
# (2)    -     Causes the current page number to be printed
+nn      3     The header will be printed on line nn
-nn     64     The footer will be printed on line nn
£nn      1     Print head is on this line when printing starts. For W, the
               next sheet must be inserted at the same place
[]       -     Text inside won't be printed, but Stage 1 codes will be executed

Additional Stage 2 codes can be defined by entering the code character
(anything other than those listed above) in REVERSE using <C>«, followed by
"=" and the ASCII value to be printed. Four of these have been predefined, but
you can change them:









                                      -4-


    Code      ASCII Value
    ----      -----------
     1        27  Escape
     2        14  Double width on some printers
     3        15  Normal width  "   "      "
     4        18  REVERSE on CBM printers, condensed on some others


TRUE ASCII (Code A): Assembler text can be entered with the screen set either
to uppercase/graphics (assumed in these instructions), or to upper/lower case.
In order to retain that choice for output to printers requiring true ASCII,
print code A acts as follows. If the screen is in upper/lower case, then cases
will be converted for printing. If the screen is in uppercase/graphics, then
unshifted letters will not be changed, but shifted letters will be converted
to true ASCII lower case (97-122). Under either setting, the output is 7-bit
ASCII, with the eighth bit cleared. The program does not, however, support
direct output to device number 2.


PRINT LINKING (Code G): All linked files should be on the same disk, or in
sequence on tape. Loading the next linked file erases the current file, so
all files should be saved before any operation involving linking is performed.
If you are linking to a tape file, you cannot also Print to tape.


                                ASSEMBLER RULES
                                ---------------


Special Tokens
----------------

 *  Program counter - no initial default value, source code must set
 &  Object code memory pointer - where assembled code is stored. Initial
    default is $9800. Can be changed anytime within the range $9800-$C7FF
 !  Forces use of two-byte value in instruction (LDA!$D0,Y = B9 D0 00)
 <  Extract the least significant byte of the value of the expression (MSB = 0)
 >  Extract the most significant byte (LSB = MSB, MSB = 0)
 '  Used as quotation mark for strings
 :  Comment - the colon and everything following is ignored, unless ' is open
 =  Value assignment - used to give specific values to labels, * or &
 $  Denotes hex number, otherwise decimal assumed
+-  Arithmetic operators for expressions
[]  Use these as parentheses in expressions
 .  "Poke" raw values into object code. Must be followed by a "type" indicator:

     '  string characters
     B  byte - only the low-order byte of the value of the expression is stored
     W  word - the value is stored as two bytes, least significant byte first
     D  double byte - two byte value, most significant byte first

,;  In poke mode, a comma separates expressions of the same type (.BTEMP,$D,0)
    and a ";" signals a new type. The ";" must be followed by a new type
    indicator (.'ENTER FILENAME ';B13,0)









                                      -5-


Labels:

Numerical values may be represented directly (either in decimal or in hex with
a leading "$"), or as "labels". A label is similar to a variable in BASIC. It
gets its value either by assignment (TEMP =$45) or from use as a "line label",
in which case the label's value is the current value of the program counter.
Labels can begin with any letter (unshifted or shifted), a graphics character,
the "?" or the "@". The second and subsequent characters may also include the
digits 0-9 and "/". Labels may be up to 15 characters long, all significant.
Labels cannot be re-defined. The special tokens "*" and "&" are not labels.


Expressions:

An expression is any combination of numbers, labels, special tokens (* or &),
single character strings ('c), operators (+ or -) and modifiers (< or >), which
is evaluated as a mathematical expression producing an integer value between
0 and $FFFF. Brackets are used to alter the normal order of precedence, which
is left-to-right. (The "<" and ">" modifiers operate on the value of the rest
of the expression or bracket. ">$D123+1" has a value of $00D1, and "<$D123+1"
equals $0024.) The "!" token, used only in instructions, can be anywhere in the
expression. The expression is the general form of numerical representation in
Assembler. A single number or label is just one type of expression.


Closing Quote:

In the poke mode, a closing quote is not necessary if the string ends the line,
but if anything follows the string, including a comment, the closing quote must
be used. In an instruction (anything beginning with a 6502 opcode), the quote
mode is permitted only for the single character following the quote, and a
closing quote must not be used (LDA #'A).


Spaces:

If the first non-space item on a line is to be a label, the label must begin
in the first column of the line. Otherwise, the line must begin with a space,
a comment, or a print code. At least one space must separate a line label and
an opcode. These are OK:

        *=$2000
TEMP    =$D6             :This is a comment
MSG1    .'ENTER FILENAME
        .' AND DEV#:'    :closing quote if comment
BEGIN   LDA TEMP         :space after opcode not required
        BEQ RET1
        LDA #<MSG1
        LDX #>MSG1
        JMP PRTMSG
RET1    RTS
INBUFF  *=*+256
RESUME  &=&+RESUME-INBUFF
:Comments can start anywhere on the line









                                      -6-


Forward References:

Assembler makes two full passes through the source code text (it is assembled
twice). On the first pass, if a label which has not been defined appears in an
expression, the label is temporarily assigned a value equal to the current
value of the program counter, which is normally a "two-byte" value (the most
significant byte is not zero). Since correct assembly requires that the length
of each instruction be the same on both passes, labels which are to have single
byte values (such as zero-page addresses) should be defined before they are
used in instructions. Alternatively, use a < or > modifier in the expression.
The error message "DIFFERENT OPCODE ON PASS 2" means that the addressing mode
of the instruction differed on the two passes, and you should define something
earlier or use a modifier. (If the M.S. byte of the value of the expression is
zero, a "short" addressing mode will result, unless "!" is used to force
selection of a "long" mode. "<" and ">" always convert the M.S. byte to zero.)


Object Code:

Regardless of the program counter setting, assembled object code is stored
beginning at $9800. The "&" token can be used to change that storage point at
any time, and must be used if you want to separate program sections (&=&+$100).
If the "&" token is not used, all object code will be stored contiguously.
Remember that only instructions and pokes actually produce object code. The
line "*=*+40" produces no object code, and therefore does not change the "&"
pointer. Code sections skipped with "&" will contain zeros. After a "NO ERRORS"
assembly, the object code is in the hidden buffer. To Save it, choose from:
   1. Use the <C>W command. You will be asked for the HEADER ADDRESS and the
FILENAME, after which the contents of the hidden buffer will be written to disk
as a program file. The header address can be entered in decimal or in $hex, and
represents the LOAD"filename",8,1 address. The <C>W command works only on disk.
   2. Exchange the text and the object code using the control characters KUX8,
then Save using the normal f8 command. The header address will be $2C00.
   3. Exit Assembler. Once in MONITOR, you can Transfer (except to $9000-$97FF)
and Save the object code as you like. The end-of-code address (+1) is in "PC".


Label Memory:

Labels are stored beginning at $C800 in the form "Nccc...cLH". N is the length
of the label name plus one, ccc...c is the label name itself, and L and H are
the Low and High bytes of the label value. Labels are stored in the order in
which they are defined in the source text. A <C>L command following successful
assembly will add the symbol table (all labels and their hex values) to the 
end of your text, unless the labels have been overwritten by buffer operations.


Linking:

The Assembler ignores all lines beginning with a print code except code "G".
To link source files, put format "G" commands at the end of each file, except
the last one, containing the Load information for the next file. If there is a
link during the first pass, Assembler will ask you to type in the filename
of the original starting file, after which it will be loaded and the second









                                      -7-


pass begun. All files used in a linked assembly must have been Saved before you
hit <C>A. Object files up to 12K can be assembled. Any number of source files
can be used, but they should all be on the same disk, or in sequence on tape.


Other:

1. Assembler does not use line numbers. Use <C>G to cursor to a line label.
2. Do not use "A" to stand for the accumulator. (ASL, not ASL A).
3. The screen is blanked during assembly to maximize processor speed.
4. An error stops assembly - error message printed and cursor shows which line.
5. Information on ML, memory maps, etc., is in the C64 Programmer's Ref. Guide.


                                    MONITOR
                                    -------


        The Monitor section is the same as MLMON64, without the relocation
routines. Complete instructions are provided by the program MLMONHLP.

SYS2030            Enter MONITOR        C FROM,THRU,WITH   Compare ranges
X                  Exit to BASIC        F FROM,THRU,byte   Fill range
:                  Comment              D [FROM][,THRU]    Disassemble
R                  Registers            Aor. BEG,instr     Assemble
/                  Change registers     L "xx",d#[,RELO]   Load
G [SBR]            Go                   S "xx",d#,FM,TO    Save
M [FROM][,THRU]    Memory display       V "xx",d#[,RELO]   Verify
= BEG,val,val...   Poke values          P                  Output to printer
= BEG,'ccccc...    Poke string          N                  Output to screen
= [BEG]            Display 8 bytes      $                  Directory
T FROM,THRU,TO     Transfer             *                  Read error channel
H FM,TH,val,...    Hunt for values      * "command"        Disk command
H FM,TH,'ccc...    Hunt for string      STOP key           Abort operation

All numerical values are in hex. Items in brackets are optional. Spaces can be
substituted for commas. The value in $7FF is a phantom for the 3 low-order
bits of $0001. Poke a number (0-7) in $7FF to change the memory banks during
fetches (power-on = 7, bank out BASIC = 6, all RAM = 0; default = 6).


                                  Memory Map:
                                  -----------

$0839 - $083B   Colors for screen, border, text
$0801 - $2BFF   Editor and assembler code and variables
$2C00 - $8FFF   Text memory
$9000 - $97FF   Monitor moved here on 1st RUN. (Don't Save Assembler after RUN)
$9800 - $FBFF   Buffer memory during text editing
$9800 - $C7FF   Object code memory during assembly
$C800 - $FBFF   Label memory during assembly

ASSEMBLR; ASSEMHLP
George Hug      Tulsa, OK      April, 1986.
