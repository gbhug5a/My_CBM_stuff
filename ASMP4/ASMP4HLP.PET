                                   ¡””≈Õ¬Ã≈“                              +4 OR √16(EXPANDED)        ¡SSEMBLER IS A 6502/8501 SYMBOLIC ASSEMBLER FOR THE +4. …T IS WRITTENENTIRELY IN MACHINE LANGUAGE, AND CONTAINS TWO FUNCTIONAL SECTIONS:‘EXT ≈DITOR - ‘HE EDITOR IS USED TO TYPE IN, EDIT, PRINT OUT, LOAD AND SAVE THESOURCE CODE TEXT. …T IS A MODIFIED VERSION OF THE ”PEED”CRIPT WORD PROCESSOR.¡SSEMBLER - ‘HIS SECTION ASSEMBLES THE SOURCE CODE TEXT INTO MACHINE LANGUAGEOBJECT CODE. …T IS ENTERED FROM THE EDITOR USING THE <√‘“Ã> ¡ COMMAND.                                  ‘≈ÿ‘ ≈ƒ…‘œ“                                  -----------        ”PEED”CRIPT 3.2 HAS BEEN SUBSTANTIALLY MODIFIED FOR USE IN ¡SSEMBLER.‘HE "WORD WRAP" FEATURE HAS BEEN REPLACED BY A NEW DISPLAY AND PRINT ROUTINEWHICH AUTOMATICALLY TABS TO THE COLUMN SET BY <√>Œ AFTER THE FIRST SPACE ONEACH LINE. ‘HIS LINES UP THE OPCODE COLUMN AUTOMATICALLY, ALLOWS THE LINE LABELFIELD TO BE CHANGED INSTANTLY, AND CONSERVES TEXT MEMORY. ‘HE <√>¬ COMMANDTOGGLES THE AUTOMATIC ADDITION OF A SPACE AFTER “≈‘’“Œ IS TYPED, SO THAT YOUEND UP IN THE OPCODE COLUMN AFTER “≈‘’“Œ; IN THIS MODE, F3 IS USED TO INSERTLINE LABELS. ¬UFFER MANIPULATION HAS BEEN MADE MORE FLEXIBLE. ŸOU CAN "HIDE"THE CURRENT BUFFER CONTENTS, AND EXCHANGE THE BUFFER AND TEXT MEMORY. ŒEW PRINTFORMAT CODES HAVE BEEN ADDED, AND THERE ARE OTHER CHANGES AS OUTLINED BELOW.∆OR DETAILED INFORMATION ON ”PEED”CRIPT, SEE THE ÕARCH, 1985 ISSUE OF √œÕ–’‘≈!.‘≈ÿ‘ ≈ƒ…‘…Œ« √œÕÕ¡Œƒ”  <√> = √ONTROL  <”> = ”HIFT  (‘) = ‘OGGLE-----------------------------------------------------------------------------  ≈”√¡–≈  ≈XIT TO ÕœŒ…‘œ“. “E-ENTER ¡SSEMBLER FROM ¬¡”…√ (“’Œ) OR ÕœŒ («100ƒ). CSR R;L  √URSOR TO NEXT CHARACTER; PREVIOUS CHARACTER. CSR D;U  √URSOR TO BEGINNING OF NEXT LINE; PREVIOUS LINE.   F1;F4  √URSOR TO BEGINNING OF NEXT WORD; PREVIOUS WORD.   F2;F5  √URSOR TO TOP OF NEXT SCREEN PAGE; BOTTOM OF PREVIOUS SCREEN PAGE.      F3  (‘) DO F6 AND ENTER INSERT MODE; (‘) EXIT INSERT MODE AND DO F1.      F6  √URSOR TO BEGINNING OF CURRENT LINE.    »≈Ã–  ÃOAD TEXT AT CURSOR. √OMMAND LINE GREEN IF CURSOR NOT AT TOP OF TEXT.      F7  ”AVE ALL TEXT. ‘EXT IS SAVED IN SCREEN CODE FORMAT AS PROGRAM FILE.   <√> ÷  ÷ERIFY FILE TO TEXT.   <√> 4  ƒISPLAY DISK DIRECTORY. ”PACE BAR PAUSES, RESUMES, THE LISTING.   <√> 8  ”END COMMAND TO DISK DRIVE, THEN READ THE ERROR CHANNEL.     ƒ≈Ã  √LEAR CHARACTER TO LEFT OF CURSOR.    …Œ”‘  …NSERT SPACE AT CURSOR.    »œÕ≈  √URSOR TO TOP OF PAGE. …F ALREADY THERE, CURSOR TO TOP OF TEXT.   √Ã≈¡“  √LEAR TEXT FROM CURSOR TO END. √LEARED TEXT IS NOT BUFFERED.   <√> ⁄  √URSOR TO END OF TEXT.    ”‘œ–  …NSERT 8 SPACES AT CURSOR.     “’Œ  …NSERT 255 SPACES AT CURSOR.  “≈‘’“Œ  ≈ND OF LINE. ƒISPLAY SHOWS "_". ÃINES MUST BE <= 128 CHARS.                                      -2-   <”> =  √URSOR TO PREVIOUS CHARACTER, CONVERT IT TO SPACE.   <√> =  √LEAR CHARACTER UNDER CURSOR.<”><√> =  √LEAR CURRENT AND ALL FOLLOWING SPACES, TO 1ST NON-SPACE CHARACTER.   <√> ,  ”AVE CURRENT CURSOR POSITION FOR LATER RETURN.   <√> .  “ETURN TO PREVIOUSLY SAVED CURSOR POSITION.   <√> 7  "»IDE" CURRENT ACTIVE BUFFER CONTENTS.  "/" SHOWS IN COMMAND LINE.   <√> 6  "’NCOVER" HIDDEN BUFFER. …NCLUDE IT IN ACTIVE BUFFER.   <√> À  ÀILL THE ACTIVE BUFFER. »IDDEN ¬UFFER ŒOT ¡FFECTED ("»¬Œ¡")   <√> “  “ESTORE ACTIVE BUFFER TO TEXT AT CURSOR. ¬UFFER NOT CLEARED. (»¬Œ¡)   <√> ÿ  ≈XCHANGE CURRENT TEXT FILE AND ACTIVE BUFFER CONTENTS. (»¬Œ¡)   <√> ≈  ≈RASE: DO <√>À, THEN CLEAR FROM TEXT, AND ADD TO ACTIVE BUFFER, THE          FOLLOWING ◊ORDS, ÃINES, –AGES, ¡LL. (»¬Œ¡)<”><√> ≈  ”AME, BUT BUFFER NOT ÀILLED. √HAIN SEPARATE ≈RASES TO BUFFER. (»¬Œ¡)   <√> ƒ  ƒELETE: DO <√>À, THEN CLEAR FROM TEXT, AND ADD TO ACTIVE BUFFER, THE          PREVIOUS ◊ORD, ÃINE, –AGE, ¡LL. (»¬Œ¡)<”><√> »  ≈NTER »UNT PHRASE, GO TO FIRST OCCURRENCE IN TEXT AFTER CURSOR.   <√> »  »UNT FOR NEXT OCCURRENCE OF PREVIOUSLY ENTERED »UNT PHRASE.<”><√>    ≈NTER “EPLACE PHRASE, REPLACE »UNT PHRASE IN TEXT IF CURRENT CURSOR          POSITION IS A »UNT "FOUND" LOCATION. (“EPLACE PHRASE CAN BE NULL.)   <√>    “EPLACE »UNT PHRASE IN TEXT WITH PREVIOUSLY ENTERED “EPLACE PHRASE.          (» AND   ARE MANUAL »UNT, MANUAL “EPLACE)<”><√> «  ≈NTER »UNT AND “EPLACE PHRASES. ¡UTOMATIC (GLOBAL) SEARCH AND REPLACE          FROM CURSOR THROUGH END OF TEXT.   <√> «  ≈NTER «OTO PHRASE (SAME AS »UNT PHRASE). √URSOR TO FIRST OCCURRENCE          IN TEXT (FROM TOP) WHICH BEGINS A LINE AND IS FOLLOWED BY A SPACE.   <√> …  (‘)≈NTER/≈XIT INSERT MODE. ¡UTOMATIC INSERT IF CURSOR ON "_".   <√> Œ  …NCREMENT THE AUTOMATIC TAB COLUMN. “OLLS FROM 2 TO 17. ƒEFAULT = 10.   <√> ¬  (‘)¡UTOMATIC SPACE AFTER “≈‘’“Œ IS TYPED.  "-" IN COMMAND LINE.   <√> ’  ƒISPLAY AMOUNT OF UNUSED TEXT MEMORY. ÕAX = 20,992 BYTES (20.5À).   <√> \  ≈NTER PRINT FORMAT CODE. ƒISPLAYED IN “≈÷≈“”≈. ”EE SECTION ON CODES.   <√> –  –RINT FROM CURSOR TO END OF TEXT TO DEVICE #4, "CASE" SAME AS SCREEN.<”><√> –  –RINT TO ”CREEN, ƒISK, –RINTER OR ‘APE.          "–RINTER" GIVES CHOICE OF DEVICE #, SECONDARY ADDRESS, FILENAME.     <”>  ”HIFT OR SHIFT LOCK PAUSES PRINTING.”‘œ–;√¬Õ  ”‘œ– KEY OR √OMMODORE KEY ABORTS PRINTING.   <√> ¡  ¡SSEMBLE: √LEAR ACTIVE AND HIDDEN BUFFERS. ¡SSEMBLE TEXT. œBJECT CODE          TO HIDDEN BUFFER IF "Œœ ≈““œ“”".   <√> ◊  ◊RITE HIDDEN BUFFER (OBJECT CODE) TO DISK AS PROGRAM FILE .   <√> Ã  ¡DD SYMBOL TABLE TO END OF TEXT AFTER "Œœ ≈““œ“”" ASSEMBLY.‘»≈ ¬’∆∆≈“: ‘HE BUFFER MEMORY RANGE ($8000-$ƒ1∆∆) IS THE SAME SIZE AS THE TEXTMEMORY. ‘HE POINTERS ¬’∆”‘“‘ AND ¬’∆≈Œƒ ALWAYS POINT TO THE START AND END OFTHE "ACTIVE" BUFFER. ¬OTH DEFAULT TO $8000. ‘HE <√>7 COMMAND HIDES THE CURRENTACTIVE BUFFER BY PUTTING THE CURRENT VALUE OF ¬’∆≈Œƒ INTO ¬’∆”‘“‘. ‘HE <√>6COMMAND RESETS ¬’∆”‘“‘ TO $8000, BUT DOES NOT CHANGE ¬’∆≈Œƒ. ‘HUS THE HIDDENBUFFER IS RESTORED TO THE ACTIVE STATE. ‘O HAVE TWO FILES IN MEMORY AT THE SAMETIME, JUST ≈RASE ¡LL THE FIRST FILE AND HIDE IT, THEN LOAD THE SECOND. ‘HE TWOCAN BE EXCHANGED BY THE CONTROL CHARACTER SEQUENCE À6ÿ7, WHICH ÀILLS THE ACTIVEBUFFER, UNCOVERS THE HIDDEN BUFFER, EÿCHANGES THE TWO FILES, AND HIDES THEBUFFERED FILE. ‘O TRANSFER TEXT FROM ONE FILE TO THE OTHER, ≈RASE THE TEXT TOTHE ACTIVE BUFFER, THEN HIT <√>7 TO INCLUDE IT IN THE HIDDEN BUFFER. ‘EXT CANBE MOVED AROUND USING ≈RASE/“ESTORE, OR COPIED USING MULTIPLE “ESTORES.                                      -3-¡¬œ“‘”: ŸOU CAN ABORT MOST FUNCTIONS REQUIRING INPUT BY HITTING “≈‘’“Œ. œNEEXCEPTION IS “EPLACE, WHICH THINKS THE REPLACE PHRASE IS NULL. …F YOU GET STUCKIN “EPLACE, DON'T HIT “≈‘’“Œ UNTIL YOU HAVE ENTERED EITHER A DUPLICATE OF THE»UNT PHRASE OR SOME PHRASE THAT WON'T OTHERWISE BE IN YOUR PROGRAM, LIKE"¡––Ã≈". ‘HEN IF ANYTHING DOES GET REPLACED, IT WILL BE EASY TO »UNT FOR.…N GENERAL, THE MANUAL »UNT AND “EPLACE ARE SAFER THAN THE GLOBAL COMBINATION.–“…Œ‘ ∆œ“Õ¡‘ √œƒ≈”------------------√ODES ARE ENTERED WITH <√>\ AND DISPLAYED IN “≈÷≈“”≈. ”TAGE 1 CODES MUST BE ATTHE BEGINNING OF A LINE, OR FOLLOW ANOTHER ”TAGE 1 CODE. ”TAGE 2 CAN BEANYWHERE. ‘HE CODES SHOWN BELOW ARE UNSHIFTED, EXCEPT "?" AND SUCH.  "NN" MEANSA NUMBER SHOULD FOLLOW THE CODE.√ODE  ƒEFAULT  ƒESCRIPTION  (2) = ”TAGE 2----  -------  --------------------------¡        -     √ONVERT PRINT OUTPUT TO TRUE ¡”√…… - ”EE NOTE BELOW¬NN     62     ¬OTTOM MARGIN - THE LAST LINE OF PRINTING, EXCEPT FOOTER√ (2)    -     √ENTER REST OF LINE ON THE PAGE (NOT ON THE MARGINS)≈ (2)    -     ≈DGE RIGHT - RIGHT JUSTIFY AT RIGHT MARGIN∆        -     ∆OOTER - THE REST OF THE LINE IS THE FOOTER. ÕAY INCLUDE ”TAGE 2«NN:FN   -     «OTO (ÃINK) THE NEXT TEXT FILE. NN = DEVICE #, FN = FILENAME»        -     »EADER - THE REST OF THE LINE IS THE HEADER. ÕAY INCLUDE ”TAGE 2…        -     …NFORMATION (COMMENT) - THE ENTIRE LINE WILL BE TOTALLY IGNORED         -     ÃINEFEED WILL FOLLOW CARRIAGE RETURNÃNN      0     ÃEFT MARGIN - THE NUMBER OF SPACES PRINTED BEFORE THE TEXTÕ        -     ÕARGIN RELEASE - SETS Ã TO ZERO FOR THIS LINE ONLY (OUTDENT)Œ        -     ŒEXT PAGE - FORCED PAGING–NN     66     –AGE LENGTH - THE NUMBER OF LINES ON A SHEET OF PAPER“NN     80     “IGHT MARGIN - MAX # OF CHARS PRINTED ON A LINE, INCLUDING Ã”NN      1     ”PACING - 1 = SINGLE, 2 = DOUBLE, ETC.‘NN      5     ‘OP MARGIN - THE FIRST LINE OF PRINTING, EXCEPT HEADER’ (2)    -     ’NDERLINE TOGGLE - BACKSPACE AND UNDERLINE (NOT √¬Õ PRINTERS)◊        -     ◊AIT FOR SINGLE SHEET INSERTION (IGNORED IF ”CREEN, ƒISK, ‘APE)ÿNN     80     ¡CROSS - WIDTH OF THE PAPER IN COLUMNS (USED FOR CENTERING)@NN      1     ”TART PAGE NUMBERING WITH PAGE NN (0 TO 65535)?NN      1     …NHIBIT PRINTING UNTIL PAGE NUMBER NN IS REACHED# (2)    -     √AUSES THE CURRENT PAGE NUMBER TO BE PRINTED+NN      3     ‘HE HEADER WILL BE PRINTED ON LINE NN-NN     64     ‘HE FOOTER WILL BE PRINTED ON LINE NN\NN      1     –RINT HEAD IS ON THIS LINE WHEN PRINTING STARTS. ∆OR ◊, THE               NEXT SHEET MUST BE INSERTED AT THE SAME PLACE[]       -     ‘EXT INSIDE WON'T BE PRINTED, BUT ”TAGE 1 CODES WILL BE EXECUTED¡DDITIONAL ”TAGE 2 CODES CAN BE DEFINED BY ENTERING THE CODE CHARACTER(ANYTHING OTHER THAN THOSE LISTED ABOVE) IN “≈÷≈“”≈ USING <√>\, FOLLOWED BY"=" AND THE ¡”√…… VALUE TO BE PRINTED. ∆OUR OF THESE HAVE BEEN PREDEFINED, BUTYOU CAN CHANGE THEM:                                      -4-    √ODE      ¡”√…… ÷ALUE    ----      -----------     1        27  ≈SCAPE     2        14  ƒOUBLE WIDTH ON SOME PRINTERS     3        15  ŒORMAL WIDTH  "   "      "     4        18  “≈÷≈“”≈ ON √¬Õ PRINTERS, CONDENSED ON SOME OTHERS‘“’≈ ¡”√…… (√ODE ¡): ¡SSEMBLER TEXT CAN BE ENTERED WITH THE SCREEN SET EITHERTO UPPERCASE/GRAPHICS (ASSUMED IN THESE INSTRUCTIONS), OR TO UPPER/LOWER CASE.…N ORDER TO RETAIN THAT CHOICE FOR OUTPUT TO PRINTERS REQUIRING TRUE ¡”√……,PRINT CODE ¡ ACTS AS FOLLOWS. …F THE SCREEN IS IN UPPER/LOWER CASE, THEN CASESWILL BE CONVERTED FOR PRINTING. …F THE SCREEN IS IN UPPERCASE/GRAPHICS, THENUNSHIFTED LETTERS WILL NOT BE CHANGED, BUT SHIFTED LETTERS WILL BE CONVERTEDTO TRUE ¡”√…… LOWER CASE (97-122). ’NDER EITHER SETTING, THE OUTPUT IS 7-BIT¡”√……, WITH THE EIGHTH BIT CLEARED. ‘HE PROGRAM DOES NOT, HOWEVER, SUPPORTDIRECT OUTPUT TO DEVICE NUMBER 2.–“…Œ‘ Ã…ŒÀ…Œ« (√ODE «): ¡LL LINKED FILES SHOULD BE ON THE SAME DISK, OR INSEQUENCE ON TAPE. ÃOADING THE NEXT LINKED FILE ERASES THE CURRENT FILE, SOALL FILES SHOULD BE SAVED BEFORE ANY OPERATION INVOLVING LINKING IS PERFORMED.…F YOU ARE LINKING TO A TAPE FILE, YOU CANNOT ALSO –RINT TO TAPE.                                ¡””≈Õ¬Ã≈“ “’Ã≈”                                ---------------”PECIAL ‘OKENS---------------- *  –ROGRAM COUNTER - NO INITIAL DEFAULT VALUE, SOURCE CODE MUST SET &  œBJECT CODE MEMORY POINTER - WHERE ASSEMBLED CODE IS STORED. …NITIAL    DEFAULT IS $8000. √AN BE CHANGED ANYTIME WITHIN THE RANGE $8000-$¡∆∆∆ !  ∆ORCES USE OF TWO-BYTE VALUE IN INSTRUCTION (Ãƒ¡!$ƒ0,Ÿ = ¬9 ƒ0 00) <  ≈XTRACT THE LEAST SIGNIFICANT BYTE OF THE VALUE OF THE EXPRESSION (Õ”¬ = 0) >  ≈XTRACT THE MOST SIGNIFICANT BYTE (Ã”¬ = Õ”¬, Õ”¬ = 0) '  ’SED AS QUOTATION MARK FOR STRINGS :  √OMMENT - THE COLON AND EVERYTHING FOLLOWING IS IGNORED, UNLESS ' IS OPEN =  ÷ALUE ASSIGNMENT - USED TO GIVE SPECIFIC VALUES TO LABELS, * OR & $  ƒENOTES HEX NUMBER, OTHERWISE DECIMAL ASSUMED+-  ¡RITHMETIC OPERATORS FOR EXPRESSIONS[]  ’SE THESE AS PARENTHESES IN EXPRESSIONS .  "–OKE" RAW VALUES INTO OBJECT CODE. ÕUST BE FOLLOWED BY A "TYPE" INDICATOR:     '  STRING CHARACTERS     ¬  BYTE - ONLY THE LOW-ORDER BYTE OF THE VALUE OF THE EXPRESSION IS STORED     ◊  WORD - THE VALUE IS STORED AS TWO BYTES, LEAST SIGNIFICANT BYTE FIRST     ƒ  DOUBLE BYTE - TWO BYTE VALUE, MOST SIGNIFICANT BYTE FIRST,;  …N POKE MODE, A COMMA SEPARATES EXPRESSIONS OF THE SAME TYPE (.¬‘≈Õ–,$ƒ,0)    AND A ";" SIGNALS A NEW TYPE. ‘HE ";" MUST BE FOLLOWED BY A NEW TYPE    INDICATOR (.'≈Œ‘≈“ ∆…Ã≈Œ¡Õ≈ ';¬13,0)                                      -5-ÃABELS:ŒUMERICAL VALUES MAY BE REPRESENTED DIRECTLY (EITHER IN DECIMAL OR IN HEX WITHA LEADING "$"), OR AS "LABELS". ¡ LABEL IS SIMILAR TO A VARIABLE IN ¬¡”…√. …TGETS ITS VALUE EITHER BY ASSIGNMENT (‘≈Õ– =$45) OR FROM USE AS A "LINE LABEL",IN WHICH CASE THE LABEL'S VALUE IS THE CURRENT VALUE OF THE PROGRAM COUNTER.ÃABELS CAN BEGIN WITH ANY LETTER (UNSHIFTED OR SHIFTED), A GRAPHICS CHARACTER,THE "?" OR THE "@". ‘HE SECOND AND SUBSEQUENT CHARACTERS MAY ALSO INCLUDE THEDIGITS 0-9 AND "/". ÃABELS MAY BE UP TO 15 CHARACTERS LONG, ALL SIGNIFICANT.ÃABELS CANNOT BE RE-DEFINED. ‘HE SPECIAL TOKENS "*" AND "&" ARE NOT LABELS.≈XPRESSIONS:¡N EXPRESSION IS ANY COMBINATION OF NUMBERS, LABELS, SPECIAL TOKENS (* OR &),SINGLE CHARACTER STRINGS ('C), OPERATORS (+ OR -) AND MODIFIERS (< OR >), WHICHIS EVALUATED AS A MATHEMATICAL EXPRESSION PRODUCING AN INTEGER VALUE BETWEEN0 AND $∆∆∆∆. ¬RACKETS ARE USED TO ALTER THE NORMAL ORDER OF PRECEDENCE, WHICHIS LEFT-TO-RIGHT. (‘HE "<" AND ">" MODIFIERS OPERATE ON THE VALUE OF THE RESTOF THE EXPRESSION OR BRACKET. ">$ƒ123+1" HAS A VALUE OF $00ƒ1, AND "<$ƒ123+1"EQUALS $0024.) ‘HE "!" TOKEN, USED ONLY IN INSTRUCTIONS, CAN BE ANYWHERE IN THEEXPRESSION. ‘HE EXPRESSION IS THE GENERAL FORM OF NUMERICAL REPRESENTATION IN¡SSEMBLER. ¡ SINGLE NUMBER OR LABEL IS JUST ONE TYPE OF EXPRESSION.√LOSING —UOTE:…N THE POKE MODE, A CLOSING QUOTE IS NOT NECESSARY IF THE STRING ENDS THE LINE,BUT IF ANYTHING FOLLOWS THE STRING, INCLUDING A COMMENT, THE CLOSING QUOTE MUSTBE USED. …N AN INSTRUCTION (ANYTHING BEGINNING WITH A 6502 OPCODE), THE QUOTEMODE IS PERMITTED ONLY FOR THE SINGLE CHARACTER FOLLOWING THE QUOTE, AND ACLOSING QUOTE MUST NOT BE USED (Ãƒ¡ #'¡).”PACES:…F THE FIRST NON-SPACE ITEM ON A LINE IS TO BE A LABEL, THE LABEL MUST BEGININ THE FIRST COLUMN OF THE LINE. œTHERWISE, THE LINE MUST BEGIN WITH A SPACE,A COMMENT, OR A PRINT CODE. ¡T LEAST ONE SPACE MUST SEPARATE A LINE LABEL ANDAN OPCODE. ‘HESE ARE œÀ:        *=$2000‘≈Õ–    =$ƒ6             :‘HIS IS A COMMENTÕ”«1    .'≈Œ‘≈“ ∆…Ã≈Œ¡Õ≈        .' ¡Œƒ ƒ≈÷#:'    :CLOSING QUOTE IF COMMENT¬≈«…Œ   Ãƒ¡ ‘≈Õ–         :SPACE AFTER OPCODE NOT REQUIRED        ¬≈— “≈‘1        Ãƒ¡ #<Õ”«1        Ãƒÿ #>Õ”«1         Õ– –“‘Õ”«“≈‘1    “‘”…Œ¬’∆∆  *=*+256“≈”’Õ≈  &=&+“≈”’Õ≈-…Œ¬’∆∆:√OMMENTS CAN START ANYWHERE ON THE LINE                                      -6-∆ORWARD “EFERENCES:¡SSEMBLER MAKES TWO FULL PASSES THROUGH THE SOURCE CODE TEXT (IT IS ASSEMBLEDTWICE). œN THE FIRST PASS, IF A LABEL WHICH HAS NOT BEEN DEFINED APPEARS IN ANEXPRESSION, THE LABEL IS TEMPORARILY ASSIGNED A VALUE EQUAL TO THE CURRENTVALUE OF THE PROGRAM COUNTER, WHICH IS NORMALLY A "TWO-BYTE" VALUE (THE MOSTSIGNIFICANT BYTE IS NOT ZERO). ”INCE CORRECT ASSEMBLY REQUIRES THAT THE LENGTHOF EACH INSTRUCTION BE THE SAME ON BOTH PASSES, LABELS WHICH ARE TO HAVE SINGLEBYTE VALUES (SUCH AS ZERO-PAGE ADDRESSES) SHOULD BE DEFINED BEFORE THEY AREUSED IN INSTRUCTIONS. ¡LTERNATIVELY, USE A < OR > MODIFIER IN THE EXPRESSION.‘HE ERROR MESSAGE "ƒ…∆∆≈“≈Œ‘ œ–√œƒ≈ œŒ –¡”” 2" MEANS THAT THE ADDRESSING MODEOF THE INSTRUCTION DIFFERED ON THE TWO PASSES, AND YOU SHOULD DEFINE SOMETHINGEARLIER OR USE A MODIFIER. (…F THE Õ.”. BYTE OF THE VALUE OF THE EXPRESSION ISZERO, A "SHORT" ADDRESSING MODE WILL RESULT, UNLESS "!" IS USED TO FORCESELECTION OF A "LONG" MODE. "<" AND ">" ALWAYS CONVERT THE Õ.”. BYTE TO ZERO.)œBJECT √ODE:“EGARDLESS OF THE PROGRAM COUNTER SETTING, ASSEMBLED OBJECT CODE IS STOREDBEGINNING AT $8000. ‘HE "&" TOKEN CAN BE USED TO CHANGE THAT STORAGE POINT ATANY TIME, AND MUST BE USED IF YOU WANT TO SEPARATE PROGRAM SECTIONS (&=&+$100).…F THE "&" TOKEN IS NOT USED, ALL OBJECT CODE WILL BE STORED CONTIGUOUSLY.“EMEMBER THAT ONLY INSTRUCTIONS AND POKES ACTUALLY PRODUCE OBJECT CODE. ‘HELINE "*=*+40" PRODUCES NO OBJECT CODE, AND THEREFORE DOES NOT CHANGE THE "&"POINTER. √ODE SECTIONS SKIPPED WITH "&" WILL CONTAIN ZEROS. ¡FTER A "Œœ ≈““œ“”"ASSEMBLY, THE OBJECT CODE IS IN THE HIDDEN BUFFER. ‘O ”AVE IT, CHOOSE FROM:   1. ’SE THE <√>◊ COMMAND. ŸOU WILL BE ASKED FOR THE »≈¡ƒ≈“ ¡ƒƒ“≈”” AND THE∆…Ã≈Œ¡Õ≈, AFTER WHICH THE CONTENTS OF THE HIDDEN BUFFER WILL BE WRITTEN TO DISKAS A PROGRAM FILE. ‘HE HEADER ADDRESS CAN BE ENTERED IN DECIMAL OR IN $HEX, ANDREPRESENTS THE Ãœ¡ƒ"FILENAME",8,1 ADDRESS. ‘HE <√>◊ COMMAND WORKS ONLY ON DISK.   2. ≈XCHANGE THE TEXT AND THE OBJECT CODE USING THE CONTROL CHARACTERS À6ÿ7,THEN ”AVE USING THE NORMAL F7 COMMAND. ‘HE HEADER ADDRESS WILL BE $2≈00.   3. ≈XIT ¡SSEMBLER. œNCE IN ÕœŒ…‘œ“, YOU CAN ‘RANSFER AND ”AVE THE OBJECTCODE AS YOU LIKE. ‘HE END-OF-CODE ADDRESS (+1) IS IN "–√".ÃABEL ÕEMORY:ÃABELS ARE STORED BEGINNING AT $¬000 IN THE FORM "ŒCCC...CÃ»". Œ IS THE LENGTHOF THE LABEL NAME PLUS ONE, CCC...C IS THE LABEL NAME ITSELF, AND Ã AND » ARETHE ÃOW AND »IGH BYTES OF THE LABEL VALUE. ÃABELS ARE STORED IN THE ORDER INWHICH THEY ARE DEFINED IN THE SOURCE TEXT. ¡ <√>Ã COMMAND FOLLOWING SUCCESSFULASSEMBLY WILL ADD THE SYMBOL TABLE (ALL LABELS AND THEIR HEX VALUES) TO THE END OF YOUR TEXT, UNLESS THE LABELS HAVE BEEN OVERWRITTEN BY BUFFER OPERATIONS.ÃINKING:‘HE ¡SSEMBLER IGNORES ALL LINES BEGINNING WITH A PRINT CODE EXCEPT CODE "«".‘O LINK SOURCE FILES, PUT FORMAT "«" COMMANDS AT THE END OF EACH FILE, EXCEPTTHE LAST ONE, CONTAINING THE ÃOAD INFORMATION FOR THE NEXT FILE. …F THERE IS A                                      -7-LINK DURING THE FIRST PASS, ¡SSEMBLER WILL ASK YOU TO TYPE IN THE FILENAMEOF THE ORIGINAL STARTING FILE, AFTER WHICH IT WILL BE LOADED AND THE SECONDPASS BEGUN. ¡LL FILES USED IN A LINKED ASSEMBLY MUST HAVE BEEN ”AVED BEFORE YOUHIT <√>¡. œBJECT FILES UP TO 12À CAN BE ASSEMBLED. ¡NY NUMBER OF SOURCE FILESCAN BE USED, BUT THEY SHOULD ALL BE ON THE SAME DISK, OR IN SEQUENCE ON TAPE.œTHER:1. ¡SSEMBLER DOES NOT USE LINE NUMBERS. ’SE <√>« TO CURSOR TO A LINE LABEL.2. ƒO NOT USE "¡" TO STAND FOR THE ACCUMULATOR. (¡”Ã, NOT ¡”Ã ¡).3. ‘HE SCREEN IS BLANKED DURING ASSEMBLY TO MAXIMIZE PROCESSOR SPEED.4. ¡N ERROR STOPS ASSEMBLY - ERROR MESSAGE PRINTED AND CURSOR SHOWS WHICH LINE.                                  ÕEMORY ÕAP:                                  -----------$1039 - $103¬   ÃUMINANCE/COLOR FOR SCREEN, BORDER, TEXT$1001 - $2ƒ∆∆   ‘EXT EDITOR CODE AND VARIABLES$2≈00 - $7∆∆∆   ‘EXT MEMORY$8000 - $ƒ1∆∆   ¬UFFER MEMORY DURING TEXT EDITING$8000 - $¡∆∆∆   œBJECT CODE MEMORY DURING ASSEMBLY$¬000 - $≈∆∆∆   ÃABEL MEMORY DURING ASSEMBLY$∆000 - $∆7∆∆   ¡SSEMBLER SECTION CODE MOVED HERE ON 1ST “’Œ.$∆800 - $∆8∆∆   œLD FUNCTION KEYS STORED HERE, RESTORED ON EXIT TO ÕœŒ…‘œ“¡””≈Õ+4; ¡”Õ+4»Ã–«EORGE »UG      ‘ULSA, œÀ      ¡PRIL, 1986.